// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_register_routes_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::register_routes();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_network_add_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::network_add(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_network_set_chain_id_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::network_set_chain_id(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_network_set_gas_price_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::network_set_gas_price(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_networks_all_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::networks_all(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_block_number_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_block_number(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_get_block_by_number_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_get_block_by_number(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_gas_price_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_gas_price(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_estimate_gas_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_estimate_gas(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_call_contract_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_call_contract(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_protocol_version_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_protocol_version(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_chain_id_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_chain_id(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_get_transaction_by_hash_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_get_transaction_by_hash(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_get_transaction_receipt_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_get_transaction_receipt(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eth_get_transaction_count_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::eth_get_transaction_count(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_web_client_version_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::web_client_version(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_web_sha3_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::web_sha3(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_net_version_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::net_version(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_sender_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::get_sender(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_trusted_time_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::get_trusted_time(_rt::string_lift(bytes0));
}
pub trait Guest {
    fn register_routes();
    fn network_add(cmd: _rt::String);
    fn network_set_chain_id(cmd: _rt::String);
    fn network_set_gas_price(cmd: _rt::String);
    fn networks_all(cmd: _rt::String);
    fn eth_block_number(cmd: _rt::String);
    fn eth_get_block_by_number(cmd: _rt::String);
    fn eth_gas_price(cmd: _rt::String);
    fn eth_estimate_gas(cmd: _rt::String);
    fn eth_call_contract(cmd: _rt::String);
    fn eth_protocol_version(cmd: _rt::String);
    fn eth_chain_id(cmd: _rt::String);
    fn eth_get_transaction_by_hash(cmd: _rt::String);
    fn eth_get_transaction_receipt(cmd: _rt::String);
    fn eth_get_transaction_count(cmd: _rt::String);
    fn web_client_version(cmd: _rt::String);
    fn web_sha3(cmd: _rt::String);
    fn net_version(cmd: _rt::String);
    fn get_sender(cmd: _rt::String);
    fn get_trusted_time(cmd: _rt::String);
}
#[doc(hidden)]
macro_rules! __export_world_evm_json_rpc_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[export_name = "register-routes"] unsafe extern "C" fn
        export_register_routes() { $($path_to_types)*::
        _export_register_routes_cabi::<$ty > () } #[export_name = "network-add"] unsafe
        extern "C" fn export_network_add(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_network_add_cabi::<$ty > (arg0, arg1) }
        #[export_name = "network-set-chain-id"] unsafe extern "C" fn
        export_network_set_chain_id(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_network_set_chain_id_cabi::<$ty > (arg0, arg1) }
        #[export_name = "network-set-gas-price"] unsafe extern "C" fn
        export_network_set_gas_price(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_network_set_gas_price_cabi::<$ty > (arg0, arg1) }
        #[export_name = "networks-all"] unsafe extern "C" fn export_networks_all(arg0 : *
        mut u8, arg1 : usize,) { $($path_to_types)*:: _export_networks_all_cabi::<$ty >
        (arg0, arg1) } #[export_name = "eth-block-number"] unsafe extern "C" fn
        export_eth_block_number(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_eth_block_number_cabi::<$ty > (arg0, arg1) } #[export_name =
        "eth-get-block-by-number"] unsafe extern "C" fn
        export_eth_get_block_by_number(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_eth_get_block_by_number_cabi::<$ty > (arg0, arg1) }
        #[export_name = "eth-gas-price"] unsafe extern "C" fn export_eth_gas_price(arg0 :
        * mut u8, arg1 : usize,) { $($path_to_types)*:: _export_eth_gas_price_cabi::<$ty
        > (arg0, arg1) } #[export_name = "eth-estimate-gas"] unsafe extern "C" fn
        export_eth_estimate_gas(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_eth_estimate_gas_cabi::<$ty > (arg0, arg1) } #[export_name =
        "eth-call-contract"] unsafe extern "C" fn export_eth_call_contract(arg0 : * mut
        u8, arg1 : usize,) { $($path_to_types)*:: _export_eth_call_contract_cabi::<$ty >
        (arg0, arg1) } #[export_name = "eth-protocol-version"] unsafe extern "C" fn
        export_eth_protocol_version(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_eth_protocol_version_cabi::<$ty > (arg0, arg1) }
        #[export_name = "eth-chain-id"] unsafe extern "C" fn export_eth_chain_id(arg0 : *
        mut u8, arg1 : usize,) { $($path_to_types)*:: _export_eth_chain_id_cabi::<$ty >
        (arg0, arg1) } #[export_name = "eth-get-transaction-by-hash"] unsafe extern "C"
        fn export_eth_get_transaction_by_hash(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_eth_get_transaction_by_hash_cabi::<$ty > (arg0,
        arg1) } #[export_name = "eth-get-transaction-receipt"] unsafe extern "C" fn
        export_eth_get_transaction_receipt(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_eth_get_transaction_receipt_cabi::<$ty > (arg0,
        arg1) } #[export_name = "eth-get-transaction-count"] unsafe extern "C" fn
        export_eth_get_transaction_count(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_eth_get_transaction_count_cabi::<$ty > (arg0, arg1)
        } #[export_name = "web-client-version"] unsafe extern "C" fn
        export_web_client_version(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_web_client_version_cabi::<$ty > (arg0, arg1) } #[export_name =
        "web-sha3"] unsafe extern "C" fn export_web_sha3(arg0 : * mut u8, arg1 : usize,)
        { $($path_to_types)*:: _export_web_sha3_cabi::<$ty > (arg0, arg1) } #[export_name
        = "net-version"] unsafe extern "C" fn export_net_version(arg0 : * mut u8, arg1 :
        usize,) { $($path_to_types)*:: _export_net_version_cabi::<$ty > (arg0, arg1) }
        #[export_name = "get-sender"] unsafe extern "C" fn export_get_sender(arg0 : * mut
        u8, arg1 : usize,) { $($path_to_types)*:: _export_get_sender_cabi::<$ty > (arg0,
        arg1) } #[export_name = "get-trusted-time"] unsafe extern "C" fn
        export_get_trusted_time(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_get_trusted_time_cabi::<$ty > (arg0, arg1) } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_evm_json_rpc_cabi;
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_evm_json_rpc_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_evm_json_rpc_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_evm_json_rpc_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:evm-json-rpc:evm-json-rpc:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 630] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf3\x03\x01A\x02\x01\
A\x16\x01@\0\x01\0\x04\0\x0fregister-routes\x01\0\x01@\x01\x03cmds\x01\0\x04\0\x0b\
network-add\x01\x01\x04\0\x14network-set-chain-id\x01\x01\x04\0\x15network-set-g\
as-price\x01\x01\x04\0\x0cnetworks-all\x01\x01\x04\0\x10eth-block-number\x01\x01\
\x04\0\x17eth-get-block-by-number\x01\x01\x04\0\x0deth-gas-price\x01\x01\x04\0\x10\
eth-estimate-gas\x01\x01\x04\0\x11eth-call-contract\x01\x01\x04\0\x14eth-protoco\
l-version\x01\x01\x04\0\x0ceth-chain-id\x01\x01\x04\0\x1beth-get-transaction-by-\
hash\x01\x01\x04\0\x1beth-get-transaction-receipt\x01\x01\x04\0\x19eth-get-trans\
action-count\x01\x01\x04\0\x12web-client-version\x01\x01\x04\0\x08web-sha3\x01\x01\
\x04\0\x0bnet-version\x01\x01\x04\0\x0aget-sender\x01\x01\x04\0\x10get-trusted-t\
ime\x01\x01\x04\0#component:evm-json-rpc/evm-json-rpc\x04\0\x0b\x12\x01\0\x0cevm\
-json-rpc\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.\
220.1\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
